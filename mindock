#!/usr/bin/python2
import sys
import os.path
import logging

import pygtk
pygtk.require('2.0')
import gtk
import glib
import wnck

from xdg.BaseDirectory import load_first_config


default_config = dict(
    height=20,
    spacing=2,
    active_bg='#a00000',
    inactive_bg='#ffffff',
    place_x='center',
    place_y='top',
    icon_margin_left=2,
    icon_margin_right=2,
    icon_margin_top=2,
    icon_margin_bottom=2,
    logging=dict(
        level=logging.WARNING,
        format='\033[4m%(asctime)s\033[m \033[35m%(levelname)s\033[m '
               '\033[33m%(name)s:%(lineno)d\033[m %(message)s',
        datefmt='%T',
    )
)


class AppIcon(gtk.DrawingArea):

    def on_expose(self, widget, event):
        cr = widget.window.cairo_create()

        if self.xwindow.is_active():
            bg = self.config['active_bg']
        else:
            bg = self.config['inactive_bg']

        cr.set_source_color(bg)
        cr.rectangle(0, 0, self.allocation.width, self.allocation.height)
        cr.fill()

        cr.set_source_pixbuf(self.pixbuf,
            self.config['icon_margin_left'], self.config['icon_margin_top'])
        cr.rectangle(0, 0, self.allocation.width, self.allocation.height)
        cr.fill()

    def on_button_press(self, widget, event):
        if event.type == gtk.gdk.BUTTON_PRESS and event.button == 1:
            timestamp = gtk.gdk.x11_get_server_time(self.window)
            self.xwindow.activate(timestamp)

    def __init__(self, xwindow, config):
        super(AppIcon, self).__init__()

        self.height = config['height']

        self.config = config
        self.xwindow = xwindow

        if xwindow.is_active():
            bg = config['active_bg']
        else:
            bg = config['inactive_bg']

        pixbuf0 = xwindow.get_icon()
        self.width = pixbuf0.get_width() * self.height / pixbuf0.get_height()
        self.pixbuf = pixbuf0.scale_simple(
            self.width, self.height, gtk.gdk.INTERP_HYPER)

        total_width = self.width + \
            config['icon_margin_left'] + config['icon_margin_right']

        self.set_size_request(total_width, config['total_height'])
        self.connect('expose-event', self.on_expose)
        self.set_events(self.get_events() | gtk.gdk.BUTTON_PRESS_MASK)
        self.connect('button-press-event', self.on_button_press)


placement_presets = dict(
    top=lambda total, my: 0,
    bottom=lambda total, my: total - my,
    center=lambda total, my: (total - my) / 2
)
placement_presets['left'] = placement_presets['top']
placement_presets['right'] = placement_presets['bottom']


def parse_placement(p, fallback):
    if callable(p):
        try:
            p(768, 20)
        except err:
            logging.error('Placement function throws an exception when '
                          'called with (768, 20). Falling back to %r' % (
                              p, fallback))
            logging.exception(err)
        else:
            return p
    elif p in placement_presets:
        return placement_presets[p]
    logging.error('Bad placement specifier %r, falling back to %r' % (
        p, fallback))
    return placement_presets[fallback]


class MainWindow(gtk.Window):

    def resize(self):
        # request minumum width
        super(MainWindow, self).resize(1, self.config['total_height'])

    def on_configure_event(self, widget, event):
        #self.move(gtk.gdk.screen_width() - event.width,
        #          gtk.gdk.screen_height() - event.height)
        x = self.config['place_x'](gtk.gdk.screen_width(), event.width)
        y = self.config['place_y'](gtk.gdk.screen_height(), event.height)
        self.move(x, y)

    def on_stdin_data(self, fd, condition):
        line = sys.stdin.readline()
        try:
            wids = map(lambda s: int(s, 0), line.strip().split())
        except:
            logging.error('malformed input line: %r' % line)
            # see comment at end of function
            return True
        logging.debug('got wids: %r' % wids)
        n = len(wids)
        wid_subs = {}
        for i in range(n):
            wid_subs[wids[i]] = i

        icons = [None] * n

        for w in self.screen.get_windows():
            wid = w.get_xid()
            if wid in wid_subs:
                icons[wid_subs[wid]] = AppIcon(w, self.config)

        self.icons_box.foreach(lambda w: w.destroy())

        for icon in icons:
            if icon:
                self.icons_box.pack_start(icon, False, False, 0)
                icon.show()

        self.resize()

        # glib requires the callback to return True to indicate that further
        # events should be listened. Otherwise the event source is removed.
        return True

    def on_stdin_err(self, fd, condition):
        logging.error('error on stdin')
        gtk.main_quit()
        return False

    def on_stdin_hup(self, fd, condition):
        logging.debug('stdin closed')
        gtk.main_quit()
        return False

    def __init__(self, config):
        super(MainWindow, self).__init__(gtk.WINDOW_TOPLEVEL)
        self.config = config

        self.set_decorated(False)
        self.modify_bg(gtk.STATE_NORMAL, config['inactive_bg'])

        self.connect('destroy', lambda w: gtk.main_quit())
        self.resize()

        self.connect('configure-event', self.on_configure_event)

        self.screen = wnck.screen_get_default()
        self.screen.force_update()

        self.box = gtk.HBox()
        self.add(self.box)

        self.icons_box = gtk.HBox(spacing=config['spacing'])
        self.box.pack_end(self.icons_box)

        self.show_all()
        self.window.set_type_hint(gtk.gdk.WINDOW_TYPE_HINT_DOCK)


def main():
    logging.basicConfig(**default_config['logging'])

    config = default_config.copy()

    config_dir = load_first_config('mindock')
    if config_dir:
        config_file = os.path.join(config_dir, 'config.py')
        if os.path.exists(config_file):
            user_config = {}
            try:
                execfile(config_file, user_config)
            except err:
                logging.error('error evaluating configuration file %s, '
                              'traceback: ' % config_file)
                logging.exception(err)
                logging.info('using default configuration')
            else:
                config.update(user_config)
                if 'logging' in user_config:
                    logging.basicConfig(user_config['logging'])
        else:
            logging.info('configuration directory present but config.py not')
            logging.info('using default configuration')
    else:
        logging.info('configuration directory not present, '
                     'using default config')

    for key, fallback in ('place_x', 'center'), ('place_y', 'top'):
        config[key] = parse_placement(config[key], fallback)

    for key in 'active_bg', 'inactive_bg':
        config[key] = gtk.gdk.color_parse(config[key])

    config['total_height'] = config['height'] + \
        config['icon_margin_top'] + config['icon_margin_bottom']

    mw = MainWindow(config)
    glib.io_add_watch(0, glib.IO_IN, mw.on_stdin_data)
    glib.io_add_watch(0, glib.IO_ERR, mw.on_stdin_err)
    glib.io_add_watch(0, glib.IO_HUP, mw.on_stdin_hup)
    gtk.main()

    logging.shutdown()


if __name__ == '__main__':
    main()
